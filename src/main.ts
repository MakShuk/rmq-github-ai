import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ValidationPipe } from '@nestjs/common';
import helmet from 'helmet';
import compression from 'compression';
import { AllExceptionsFilter } from './filters/http-exception.filter';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);
  const port = configService.get<number>('PORT') || 3000;

  // –í–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  app.use(helmet());
  app.use(compression());

  // –í–∫–ª—é—á–∞–µ–º CORS —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Swagger
  app.enableCors({
    origin: [
      'http://localhost:3000',
      'http://localhost:3001',
      'http://127.0.0.1:3000',
      'http://127.0.0.1:3001',
      // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      process.env.NODE_ENV === 'development' ? /.*/ : false
    ].filter(Boolean),
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-API-Key'],
  });

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  app.useGlobalFilters(new AllExceptionsFilter());

  // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.setGlobalPrefix('api/v1');

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Swagger
  const config = new DocumentBuilder()
    .setTitle('GitHub AI API')
    .setDescription(`
    ## GitHub AI API Documentation

    –≠—Ç–æ API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏ –æ—Ç GitHub.

    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI –º–æ–¥–µ–ª—è–º
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (GPT-4o-mini, GPT-4o, GPT-3.5-turbo)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    - Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

    ### –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Ç—Ä–µ–±—É–µ—Ç—Å—è GitHub —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    ### Rate Limiting:
    API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

    ### –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:
    –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è API: 1.0.0
    –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ URL –ø—É—Ç—å: /api/v1/

    ### –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
    –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: support@github-ai.com
    `)
    .setVersion('1.0.0')
    .setContact(
      'GitHub AI Support',
      'https://github-ai.com/support',
      'support@github-ai.com'
    )
    .setLicense('MIT', 'https://opensource.org/licenses/MIT')
    .addServer('http://localhost:9811', 'Development server')
    .addServer('http://127.0.0.1:9811', 'Development server (localhost)')
    .addServer('https://staging-api.github-ai.com', 'Staging server')
    .addServer('https://api.github-ai.com', 'Production server')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        in: 'header',
      },
      'JWT-auth'
    )
    .addApiKey(
      {
        type: 'apiKey',
        name: 'X-API-Key',
        in: 'header',
        description: '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      },
      'ApiKey-auth'
    )
    .addTag('AI', '–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –º–æ–¥–µ–ª—è–º–∏')
    .addTag('Health', '–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã')
    .addTag('Documentation', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã')
    .setExternalDoc('GitHub Repository', 'https://github.com/your-org/github-ai')
    .setExternalDoc('Postman Collection', 'https://api.github-ai.com/postman')
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    operationIdFactory: (_controllerKey: string, methodKey: string) => methodKey,
    extraModels: [],
    deepScanRoutes: true,
  });

  SwaggerModule.setup('api/docs', app, document, {
    customSiteTitle: 'GitHub AI API Documentation',
    customfavIcon: '/favicon.ico',
    customCss: `
      .topbar-wrapper img { content: url('https://github.com/github.png'); width: 50px; height: auto; }
      .swagger-ui .topbar { background-color: #24292e; }
      .swagger-ui .topbar-wrapper .link { color: #ffffff; }
      .swagger-ui .info .title { color: #24292e; }
    `,
    customJs: '',
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
      filter: true,
      showExtensions: true,
      showCommonExtensions: true,
      docExpansion: 'none',
      defaultModelsExpandDepth: 2,
      defaultModelExpandDepth: 2,
      tryItOutEnabled: true,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É CORS –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Swagger UI
      supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
      requestInterceptor: (request: any) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return request;
      },
      responseInterceptor: (response: any) => {
        return response;
      }
    },
  });

  await app.listen(port);
  console.log(`üöÄ Application is running on: http://localhost:${port}`);
  console.log(`üìö Swagger documentation available at: http://localhost:${port}/api/docs`);
  console.log(`üîç Health check available at: http://localhost:${port}/api/v1/health`);
}

bootstrap();
